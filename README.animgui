1. How to use the GUI

1.1 Startin' her up

Start up the GUI by typing in "animgui", located in the "bin" directory of
your assignment, with no command-line parameters. You should be presented
with an amazingly elegant, yet mind-blowingly functional GUI where you can
specify polygons and how they change over time.

1.2 Specifying polygons

Shift-click on the main canvas (the Edit Window) to begin defining your
polygon. Additional shift-clicks will add more vertices at the specified
locations to your polygon. As soon as you do a normal click, you close the
polygon and cannot add any more vertices to it (unless, of course, you
want some extra credit). If you only bestow 1 or 2 points unto your
polygon, it is discarded. You can specify up to MAX_OBJECTS (defined in
objects.h) on your canvas.

1.3 Editing polygons

If your polygon offends you with its bold shape and sharp corners, you can
modify the location of any (or all) of the vertices. Simply click (as
opposed to shift-clicking) near the vertex you wish to move, then drag it
to its new location. You can also move entire polygons by right-clicking on a
polygon vertex and dragging it around.

1.4 Deleting polygons

If no amount of vertex modification will improve your polygon, select it
by clicking on one of its vertices and hit the "Del" key or the
"Backspace" key. Both of these should cause the offending polygon to
disappear forever.

1.5 Keyframes

A keyframe is an exact specification of a polygon at a given moment in
time. For instance, suppose you wanted to smoothly animate a square
turning into a house turning back into a square. You could individually
animate each frame, incrementally changing your square to look more and
more like a house (this is how traditional animation like Disney works),
but that is a pain in the behind, especially if you wish to also have a
life. The computer animation approach is to set keyframes:

Frame 1: Polygon looks like a square
Frame 15: Polygon looks like a house
Frame 30: Polygon looks like a square again

and the computer will fill in frames 2-14 and 16-29, by doing all of the
boring incrementing for you. 

The GUI provided allows you to easily set keyframes. Use the frame
spinner to select which frame you wish to set a keyframe at. (WARNING: If
you input a frame number using the text input box, be sure and press Enter
to register the change before continuing) Then edit the object you wish to
change. Voila! A red border appears, indicating that you have a keyframe
at that position. Now, if you browse the frames using the spinner, you
will see that the object is automatically interpolating between frames. By 
default, when you create an object, a keyframe is automatically created at 
frame 1 with that configuration.

1.6 Deleting Keyframes

What could be more simple? Spin to the offending keyframe and hit "Delete
Keyframe". The red border should go away, and any objects that had
keyframes at that frame will lose a little piece of themselves. Note that
you cannot delete keyframe 1; think of keyframe 1 as the "existence
keyframe", without which objects cannot survive.

1.7 Saving/Loading Object Files

To save an animation you have created, type in the name ("wombat", for
example) in the "Filename" field in the Save/Load panel and click "Save
Objects". The GUI will create a file "wombat.obs" that holds all of your
polygon and keyframe information. To load this file back in, type "wombat"
in the filename field and click Load -- you don't need to add the ".obs"
file extension.

1.8 Rendering

Now for the fun part. The first step is to set your antialias and motion
blur settings. These are pretty straightforward; click the checkbox to
enable a particular feature, then input the number of samples you want. 

To render the current frame of your animation, check the "This Frame Only"
radio button and hit "Render". If all goes well, your newly implemented 
rasterizer should display a filled, motion-blurred, antialiased,
museum-quality version of the pathetic line drawing in the edit
canvas. If you put text ("kangaroo") in the "Render Out" field, a
kangaroo.ppm file with your masterpiece will also be generated.

To render multiple frames, check the "Multiple Frames" radio button and
input the frame range you wish to render. In this case, you definitely
should input text into the "Render Out" field ("images/platypus", for
example), and the GUI will generate, in this case in the images/ directory:

platypus.5.ppm <- frame 5
platypus.6.ppm 
...
platypus.60.ppm <- frame 60
platypus.list (more on this later)

Warning: The .ppm files weigh in at about 700K each, so don't use up your
quota rendering 1000 frame animations.

Warning, part 2: Closing the Render Window will quit your program. Once it
gets popped up, just leave it alone. 

2. Command Line Arguments

One of the things that sucks about the GUI is that, in most cases, you
won't be able to use an emulator from your dorm room or whatnot to work on
it, because it displays OpenGL windows that most emulators don't
support. Not to worry! If the Sweet Hall labs are crowded, or if you are
just plain lazy, we have provided an alternative way for you to test your
rasterizer. For this, you will need:

one (1) .obs file

That's it! Once you have your .obs file (we'll provide you with some, or
you can create one with the GUI), invoke the animgui with the following
arguments:

animgui [-a<# of samples>] [-m<# of samples>] <start frame> <end frame>
<input OBS file> <output label>

So, if we wanted to make a Tazmanian devil animation, we might do
something like:

animgui -a4 -m6 1 50 tdevil.obs tdevil

This would read in tdevil.obs, render frames 1 through 50 with
antialiasing on (4 samples) and motion blurring on (6 samples), and export
the lot to tdevil.1.ppm, tdevil.2.ppm, etc. It will also generate a tdevil.list
file (which I'll get to in a bit).

animgui 5 5 tdevil.obs tdevil

Same as above, but with no antialiasing or motion blurring, and only
rendering frame 5.

3. Support Utilities

OK, so now you have the .ppms and a .list file, so what do you do with it?
Well, in the /usr/class/cs248/support/bin/i386-linux directory, there are
two utilities: ppm2fli and xanim. Grab them both.

Now, after switching to the directory with your .list file, run:

ppm2fli tdevil.list tdevil.flc

This utility will take all of the ppms found in your .list file and
compress them into an animation. After it does this, you can watch your
animation by typing:

xanim tdevil.flc

When you're giving your speech to the Academy, remember to mention your
wonderful CS248 TAs.

That should be it! Check objects.h for more implementation-specific
details.





